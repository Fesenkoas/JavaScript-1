class Company {
    constructor() {
        this._employees = [];
    }

    get employees() {
        return [...this._employees];
    }

    addEmployee(employee) {
        const index = this._employees.findIndex(e => e.id === employee.id);
        if (index < 0) {
            this._employees.push(employee);
            const li = createInfoElement(employee.toString, 'li');
            const buttonDel = createInfoElement('X', 'button');
            buttonDel.onclick = function ({ target }) {
                target.parentElement.remove();
                company.removeEmployee(employee.id);
                clearStats();
            }
            li.append(buttonDel);
            personsList.append(li);
            clearStats();
            allValues();
        }
        else {
            return alert(`Person with id = ${employee.id} exists`);
        }

    }

    removeEmployee(id) {
        const index = this._employees.findIndex(e => e.id === id);
        if (index >= 0) {
            this._employees.splice(index, 1);
        }
        return index >= 0;
    }

    static(){
        return function () {
            const divStats = document.createElement('div');
            const h3avg = createInfoElement(`Average age: ${company.avarageAge().toFixed(1)}`, 'h3');
            const h3min = createInfoElement(`Min age: ${company.minAge()}`, 'h3');
            const h3max = createInfoElement(`Max age: ${company.maxAge()}`, 'h3');
            const sMax = createInfoElement(`Average slary: ${company.avarageSalary()}`, 'h3');
            const sTotal = createInfoElement(`Total salary: ${company.totalSalary()}`, 'h3');
            divStats.append(h3avg, h3min, h3max, sMax, sTotal);
            if (stats.firstElementChild.nextElementSibling) {
                stats.replaceChild(divStats, stats.firstElementChild.nextElementSibling);
            } else {
                stats.appendChild(divStats);
            }
        }
    }

    avarageAge(){
        let res = company._employees.reduce((accum, p) => accum + p.age, 0) / company._employees.length;
        return res;
    }

    minAge(){
        let res = company._employees.reduce((min, p) => p.age < min ? p.age : min, company._employees[0].age);
        return res;
    }

    maxAge(){
        let res = company._employees.reduce((max, p) => p.age < max ? max : p.age, company._employees[0].age);;
        return res;
    }

    totalSalary(){
        let res = company._employees.reduce((accum, p) => accum + p.salary, 0);
        return res;
    }

    avarageSalary(){
        let res = company._employees.reduce((accum, p) => accum + p.salary, 0) / company._employees.length;
        return res;
    }
    

}

